// Using default import for jspdf
import jsPDF from 'jspdf';
import { AnalysisResult, CloudburstRiskData } from '@/types/analysis';

export const generatePdfReport = (result: AnalysisResult, cloudburstRisk: CloudburstRiskData | null) => {
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(22);
  doc.setTextColor(0, 51, 102);
  doc.text('Flood Watch Analysis Report', 20, 25);
  
  // Add date
  doc.setFontSize(12);
  doc.setTextColor(100);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 35);
  
  // Add a line
  doc.setDrawColor(0, 51, 102);
  doc.setLineWidth(0.5);
  doc.line(20, 40, 190, 40);
  
  // Add Analysis Results section
  doc.setFontSize(18);
  doc.setTextColor(0, 0, 0);
  doc.text('Analysis Results', 20, 55);
  
  // Add flood detection result
  doc.setFontSize(12);
  doc.text('Flood Detection:', 20, 70);
  doc.setFont('helvetica', 'bold');
  doc.text(result.floodDetected ? 'Flood Detected' : 'No Flood Detected', 60, 70);
  doc.setFont('helvetica', 'normal');
  
  // Add risk level
  doc.text('Risk Level:', 20, 80);
  doc.setFont('helvetica', 'bold');
  doc.text(result.riskLevel.toUpperCase(), 60, 80);
  doc.setFont('helvetica', 'normal');
  
  // Add confidence level
  doc.text('Confidence:', 20, 90);
  doc.text(`${result.confidence}%`, 60, 90);
  
  // Add affected area
  doc.text('Affected Area:', 20, 100);
  doc.text(`${result.affectedArea} sq km`, 60, 100);
  
  // Add Cloudburst Risk section if available
  if (cloudburstRisk) {
    doc.addPage();
    doc.setFontSize(18);
    doc.text('Cloudburst Risk Assessment', 20, 25);
    
    doc.setFontSize(12);
    doc.text('Risk Level:', 20, 40);
    doc.setFont('helvetica', 'bold');
    doc.text(cloudburstRisk.risk.toUpperCase(), 60, 40);
    doc.setFont('helvetica', 'normal');
    
    doc.text('Confidence:', 20, 50);
    doc.text(`${Math.round(cloudburstRisk.confidence * 100)}%`, 60, 50);
    
    if (cloudburstRisk.cloudType) {
      doc.text('Cloud Type:', 20, 60);
      doc.text(cloudburstRisk.cloudType, 60, 60);
    }
    
    if (cloudburstRisk.windShear) {
      doc.text('Wind Shear:', 20, 70);
      doc.text(`${cloudburstRisk.windShear} m/s`, 60, 70);
    }
    
    if (cloudburstRisk.moistureContent) {
      doc.text('Moisture Content:', 20, 80);
      doc.text(`${cloudburstRisk.moistureContent} g/mÂ³`, 60, 80);
    }
    
    // Add assessment
    doc.setFontSize(12);
    doc.text('Assessment:', 20, 100);
    const assessmentText = getCloudburstRiskDescription(cloudburstRisk.risk);
    const splitText = doc.splitTextToSize(assessmentText, 170);
    doc.text(splitText, 20, 110);
  }
  
  // Add footer to the current page
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text(
    'Generated by Uttarakhand Flood Watch',
    doc.internal.pageSize.width / 2,
    doc.internal.pageSize.height - 10,
    { align: 'center' }
  );
  
  return doc;
};

const getCloudburstRiskDescription = (risk: string) => {
  switch (risk.toLowerCase()) {
    case 'low':
      return 'Minimal risk of cloudburst. Standard weather conditions expected.';
    case 'medium':
    case 'moderate':
      return 'Moderate risk of cloudburst. Monitor weather conditions closely and stay alert for updates.';
    case 'high':
      return 'High risk of cloudburst. Be prepared for heavy rainfall and potential flooding.';
    case 'extreme':
      return 'EXTREME RISK OF CLOUDBURST. Take immediate action to protect life and property as heavy rainfall is imminent.';
    default:
      return 'Cloudburst risk assessment not available.';
  }
};

export const downloadPdf = (result: AnalysisResult, cloudburstRisk: CloudburstRiskData | null, filename: string = 'flood_analysis_report') => {
  const doc = generatePdfReport(result, cloudburstRisk);
  doc.save(`${filename}_${new Date().toISOString().split('T')[0]}.pdf`);
};
